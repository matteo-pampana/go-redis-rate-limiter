// Code generated by MockGen. DO NOT EDIT.
// Source: ./ratelimiter.go

// Package ratelimiter is a generated GoMock package.
package ratelimiter

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// Mockstore is a mock of store interface.
type Mockstore struct {
	ctrl     *gomock.Controller
	recorder *MockstoreMockRecorder
}

// MockstoreMockRecorder is the mock recorder for Mockstore.
type MockstoreMockRecorder struct {
	mock *Mockstore
}

// NewMockstore creates a new mock instance.
func NewMockstore(ctrl *gomock.Controller) *Mockstore {
	mock := &Mockstore{ctrl: ctrl}
	mock.recorder = &MockstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstore) EXPECT() *MockstoreMockRecorder {
	return m.recorder
}

// GetCounter mocks base method.
func (m *Mockstore) GetCounter(ctx context.Context, requestKey string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", ctx, requestKey)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockstoreMockRecorder) GetCounter(ctx, requestKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*Mockstore)(nil).GetCounter), ctx, requestKey)
}

// IncreaseWithTTL mocks base method.
func (m *Mockstore) IncreaseWithTTL(ctx context.Context, requestKey string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseWithTTL", ctx, requestKey, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseWithTTL indicates an expected call of IncreaseWithTTL.
func (mr *MockstoreMockRecorder) IncreaseWithTTL(ctx, requestKey, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseWithTTL", reflect.TypeOf((*Mockstore)(nil).IncreaseWithTTL), ctx, requestKey, ttl)
}
